apiVersion: v1
kind: PersistentVolume            # Create a PersistentVolume
metadata:
  name: mysql-pv
  labels:
    type: local
spec:
  storageClassName: standard
  capacity:
    storage: 250Mi
  accessModes:
    - ReadWriteOnce
  hostPath:                       # This is a NFS emulator to enable this to be carried to other pods
    path: "/mnt/data"
  persistentVolumeReclaimPolicy: Retain  # This only releases the Volume from Kubernetes keeping the data avialable
---    
apiVersion: v1
kind: PersistentVolumeClaim        # A Claim is needed to point to the real volume so it can be reused
metadata:                          
  name: mysql-pv-claim
  labels:
    app: nodejs-app
spec:                              
  storageClassName: standard       
  accessModes:
    - ReadWriteOnce                # Allows only one node to use the volume avoiding IO errors
  resources:
    requests:
      storage: 250Mi
---
apiVersion: v1                    
kind: Service                     
metadata:
  name: nodejs-app-mysql          # Reference name to be used inside Kubernete
  labels:                         # Labels helps us get organized
    app: nodejs-app
spec:
  ports:
    - port: 3306
  selector:                       # Selects any Pod with labels `app=nodejs-app,tier=mysql`
    app: nodejs-app
    tier: mysql
  clusterIP: None
---
apiVersion: apps/v1
kind: Deployment                    
metadata:
  name: nodejs-app-mysql            
  labels:                           
    app: nodejs-app
spec:
  selector:
    matchLabels:                    # What labes this deploy will reach by service/pod labes
      app: nodejs-app
      tier: mysql
  strategy:
    type: Recreate
  template:                         # Template for the Pods in this deployment
    metadata:
      labels:                       
        app: nodejs-app
        tier: mysql
    spec:                           
      containers:
      - image: mysql:5.7            # Image for MySQL 5.7 from official provider
        name: mysql
        env:                        # Environment variables passed to the container 
        - name: MYSQL_ROOT_PASSWORD 
          valueFrom:                # Read environment variables from kubernetes secrets
            secretKeyRef:
              name: mysql-root-pass
              key: password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-db-name
              key: database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-user-pass
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-user-pass
              key: password
        ports:
        - containerPort: 3306        # The ports available in Kubernetes       
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage  
          mountPath: /var/lib/mysql
      volumes:                       
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim